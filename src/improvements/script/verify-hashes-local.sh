#!/bin/bash
set -euo pipefail

# This script verifies the domain separator and message hash of a task between the VALIDATIONS.md file
# and a local forge script.
# The tenderly_payload is generated by MultisigTask.sol::logTenderlySimulationPayload and is a convenient
# format to encode a transaction.
# For more info about the Tenderly simulation format see:
# https://docs.tenderly.co/reference/api#/operations/simulateTransaction
# Usage: ./verify-hashes.sh <task_path> <safe_name> <tenderly_payload>
verify_hashes() {
  task_path=$1
  safe_name=$2
  tenderly_payload=$3
  root_dir=$(git rev-parse --show-toplevel)
  rpcUrl=$("$root_dir"/src/improvements/script/get-rpc-url.sh "$task_path")

  # Check that VALIDATIONS.md exists
  if [ ! -f "$task_path/VALIDATIONS.md" ]; then
      echo -e "\n\n\033[1;31mVALIDATIONS.md file not found for task $(basename "$task_path")\033[0m\n"
      exit 1
  fi

  # Calculate the domain and message hashes locally using forge
  # We use a file to pass the output to make sure any errors are printed to the console.
  forge_output_file="./forge_output.txt"
  forge script \
    --rpc-url "$rpcUrl" \
    "$root_dir"/script/CalculateSafeHashes.s.sol \
    --sig "calculateSafeHashes(string)" "$tenderly_payload" \
    -vvv | tee "$forge_output_file"

  # Extract domain separator and message hash from the simulation output
  domain_separator_local=$(awk '/Domain Separator:/{print $3}' "$forge_output_file")
  message_hash_local=$(awk '/Message Hash:/{print $3}' "$forge_output_file")
  rm "$forge_output_file"

  # Parse the domain separator and message hash from the VALIDATIONS.md file - from [validation_hashes] until two consecutive blank lines
  validations_toml_file="./validations.toml"
  sed -n '/^\[validation_hashes\]$/,/^$/p' "$task_path/VALIDATIONS.md" | sed '/^$/q' > "$validations_toml_file"

  # Use yq to extract the domain_hash and message_hash for the specific safe
  domain_separator_validations=$(yq -oy -r -p=toml ".\"$safe_name\".domain_hash" "$validations_toml_file")
  message_hash_validations=$(yq -oy -r -p=toml ".\"$safe_name\".message_hash" "$validations_toml_file")
  
  # Clean up the temporary file
  rm -f "$validations_toml_file"
  
  echo -e "\n\n-------- Domain Separator and Message Hashes from Validations file --------"
  echo "  Domain separator: $domain_separator_validations"
  echo "  Message hash: $message_hash_validations"

  # Compare the validations and the local hashes
  if [ "$domain_separator_validations" != "$domain_separator_local" ]; then
      echo -e "\n\n\033[1;31mLocal domain separator mismatch\033[0m\n"
      exit 1
  fi
  if [ "$message_hash_validations" != "$message_hash_local" ]; then
      echo -e "\n\n\033[1;31mLocal message hash mismatch\033[0m\n"
      exit 1
  fi

  echo -e "\n\n\033[1;32mDomain separator and message hashes match\033[0m\n"
}

verify_hashes "$1" "$2" "$3"