#!/bin/bash
set -euo pipefail

# This script verifies the domain separator and message hash of a task between the VALIDATIONS.md file
# and a Tenderly simulation.
# The tenderly_payload is generated by MultisigTask.sol::logTenderlySimulationPayload.
# For more info about its format see:
# https://docs.tenderly.co/reference/api#/operations/simulateTransaction
# Usage: ./verify-hashes.sh <task_path> <safe_name> <tenderly_payload>
verify_hashes() {
  task_path=$1
  safe_name=$2
  tenderly_payload=$3
  root_dir=$(git rev-parse --show-toplevel)

  # Check that VALIDATIONS.md exists
  if [ ! -f "$task_path/VALIDATIONS.md" ]; then
      echo -e "\n\n\033[1;31mVALIDATIONS.md file not found for task $(basename "$task_path")\033[0m\n"
      exit 1
  fi

  # Simulate the task with Tenderly and extract the domain and message hashes
  # We use a file to pass the output to make sure any errors are printed to the console.
  remote_output_file="./remote_output.txt"
  "$root_dir"/src/improvements/script/get-tenderly-hashes.sh "$tenderly_payload" 2>&1 | tee "$remote_output_file"   

  # Extract the domain and message hashes from the remote output
  domain_separator_remote=$(awk '/Domain Separator:/{print $3}' "$remote_output_file")
  message_hash_remote=$(awk '/Message Hash:/{print $3}' "$remote_output_file")
  rm "$remote_output_file"

  # Parse the domain separator and message hash from the VALIDATIONS.md file - from [validation_hashes] until two consecutive blank lines
  validations_toml_file="./validations.toml"
  sed -n '/^\[validation_hashes\]$/,/^$/p' "$task_path/VALIDATIONS.md" | sed '/^$/q' > "$validations_toml_file"

  # Use yq to extract the domain_hash and message_hash for the specific safe
  domain_separator_validations=$(yq -oy -r -p=toml ".\"$safe_name\".domain_hash" "$validations_toml_file")
  message_hash_validations=$(yq -oy -r -p=toml ".\"$safe_name\".message_hash" "$validations_toml_file")
  
  # Clean up the temporary file
  rm -f "$validations_toml_file"
  
  # Compare the validations and remote hashes
  if [ "$domain_separator_validations" != "$domain_separator_remote" ]; then
      echo -e "\n\n\033[1;31mRemote domain separator mismatch\033[0m\n"
      exit 1
  fi
  if [ "$message_hash_validations" != "$message_hash_remote" ]; then
      echo -e "\n\n\033[1;31mRemote message hash mismatch\033[0m\n"
      exit 1
  fi

  echo -e "\n\n\033[1;32mDomain separator and message hashes match\033[0m\n"
}

verify_hashes "$1" "$2" "$3"